== Structure

Bm projects, also named [Suites], can be organized using two concepts: [Members] and [Containers].
Some containers are also members and some members are flat.

The definition of the members and containers of a suite depends on the directory
organization and the content of the files. All files and directories are used for
defining the suite.

@ref:container
=== Containers

The containers are used for collecting members, all containers have a name, but not 
all containers can be referenced in the code.

The root container for all members and containers is the [suite], which can be considered
as a [module] that cannot be referenced. A directory containing at least the [suite file]
is considered a valid suite definition.

Besides the suites, there are other containers defined by using the file system:

- [Source File] (\*.bm): Any kind of member can be defined in a source file. 
  The filename is not relevant since they cannot be referenced. 
  At compilation time, it doesn't matter the amount or the order of the source files 
  in a directory, they can be considered as a single content.
- [Module] (implicit): Any directory inside a suite define a module with the same name, 
  naturally they only can contain files and more directories, however, the members 
  defined in the source files are owned by the module and the directories are considered 
  sub-modules.

There are other containers that can only be defined by writing Bm code:

- [Module] (explicit): They are defined with the `module` keyword and can contain any kind of member. 
  Module definitions are not unique, the members are merged when any other kind of
  module definitions are found.
- [Class]: Can contain [Fields], [Functions], [Getters], [Setters], [Operations] and [Constructors].
  The [Fields] of a class are the only members that cannot be added by using [extensions].
- [Interface]: Can contain the same members than a class, except fields. Members of an interface
  can be defined by using extensions as well.
- [Enum]: Can only contain enumerated fields, however, [Functions], [Getters], 
  [Setters] and [Operations] can be added only by using extensions.

@ref:member
=== Members

Members are owned by a container and have a name. The name of a member in a container 
must be unique, however, two or more members can be grouped using the same name
when they are [overloaded] or when they are a [getter] and [setter] pair.

[Classes], [interfaces], [enums] and [modules] are members that are [containers] as well.
The modules are the only members that can be nested indefinitely. Classes, interfaces and
enums are owned exclusively by modules.

Members listed below can be overloaded, in other words, multiple definitions can 
share the same name as long as the [overloading] rules are followed:

- [Functions]: Can be defined in [modules] and [classes]. Naturally, when defined 
  in classes, an instance is required so they can be invoked.
- [Constructors]: Can be defined directly inside a class but in a module, they can be 
  defined only through extensions.
- [Operations]: Have the same definition rules than the constructors but the name 
  is restricted to the [allowed operations].

[Fields] are the most simple members since they can't receive parameters or have
a body. They can be defined in modules and classes, behaving just like the [functions].

[Getters] and [Setters] can share the same name since, together, they can be treated 
like a field. They can be defined in [modules] and [classes] as well.

