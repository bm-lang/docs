== Extended Functions

Overriding inherited functions in classes is disallowed, however the way of adding behaviour is by using `before` and `after`.

Since in Bm is not possible to override an inherited function, an alternative might be to add aspects to the class
so it can be possible to execute some block of code before or after the function is called.

Aspects should be directly added only to inherited functions to avoid obscuring the logic of normal functions.

The block of code to be executed before or after the function should not have return type,
the parameters for _before_ blocks, should be exactly the same than the target function and
the parameters for _after_ blocks, should be the same than the target function plus the return type only when it applies.
In this way, aspects will be able to mutate the input and output of a function, but won't be able to change the references.

Only one aspect per _before_ and _after_ should be allowed in one class.
The aspects added to functions which the superclasses already added aspects will be chained.

@source[bm]
```
class Shape {
  var x = 0;
  var y = 0;

  function moveTo(@x Int, @y Int) {
    x = @x;
    y = @y;
  }
}

class Element {
  function redraw() { /* ... */ }
}

class Oval inherits Element, Shape {

  after moveTo(@x Int, @y Int) {
    redraw();
  }

  var width = 0;
  var height = 0;

  function draw(g Graphics) {
    g.drawOval(x, y, width, height);
  }

}
```
