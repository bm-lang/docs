@ref:suite
== Suites

_Suite_ is a Bm concept for representing projects, solutions, programs or packages.
This concept is important since Bm is not designed for scripting, said in other 
words, the design doesn't promote having stand-alone files:

- Suites are created with a folder having at least a [suite file].
- Folders inside a suite create [modules], for making reference to them it is required
  to use the [member path] always relative to the suite folder.
- Sibling source files have complete access to each others members, they can be
  considered as a single content.

Suites can be compiled to a distributable file format containing the necessary information 
to be imported in other suites or executed in any platform. Only suites containing an 
[Entry Point] can be executed, however, all suites can be imported in other suites.

=== Suite File

A suite file is a JSON file named `bm.json`, it describes the suite represented
by the folder where the file is. This folder is considered the [Suite Module].

:: Required fields in a suite file.
|= Name | Type | Description | Default value

|- `id` 
   | String 
   | It is an UUID identifying the suite, it is analogous to a fingerprint. 
     This value should never be changed since it is used to validate the correctness
     of a suite reference.
   | Random UUID.

|- `name`
   | String
   | The name of the [Suite Module]. This name is used by other suites for importing
     the members from this suite.
   | The name of the suite folder.

|- `version`
   | String
   | Is a value composed by three numbers in the following format: _major.minor.patch_.
     The numbers between a versions should be incremented by following these criteria:

     - _Major_: changes breaking backward-compatibility.
     - _Minor_: changes introducing new features.
     - _Patch_: changes solving bugs.
   | `0.0.0`

Despite previous fields are required, they are auto-filled with the default values
when they are missing.

=== Entry Point

A suite can be executed only if it contains an entry point which normally is a function
in the [suite module] named `main`, however, it can be changed in the [suite file].

+++ code:bm
// main.bm
function main() {
  // program logic
}
+++
:^ Example of an entry point.
