
--------------------------------------------------------------------------------------------------------------
class Test {
  var x = 10;
  function test(value Int) Int {
    log("Test ${value}");
    return value + x;
  }
}

class ExtendedTest {
  var y = 20;

  before test(value Int) {
    log("Before Test ${value}");
  }

  after test(value Int, result Int) {
    log("After Test ${value} - ${result}");
  }
}

function generate() Test {
  return RANDOM > 0.5 ? Test() : ExtendedTest();
}

function main() {
  let test = generate();

  test.test();
}

--------------------------------------------------------------------------------------------------------------
TYPE Test
BEGIN
  DECLARE x AS int32
END

PROCEDURE Test_constructor
RETURNS Test
BEGIN
  DECLARE instance AS Test
  SET instance REF NEW Test
  SET instance.x REF LITERAL 10 AS int32
  RETURN instance
END

PROCEDURE Test_function_test_Int_Int
PARAMS(this AS Test, value AS int32)
RETURNS int32
BEGIN
  CALL log(
    CALL String_join(
      LITERAL "Test " AS String,
      CALL int32_to_string(this.value)
    )
  )
  RETURN ADD(value, LITERAL 1 AS INT32);
END

TYPE ExtendedTest
EXTENDS(Test)
BEGIN
  DECLARE y AS int32
END

PROCEDURE ExtendedTest_constructor
RETURNS ExtendedTest
BEGIN
  field instance = new ExtendedTest;
  instance.x = 10;
  instance.y = 20;
  return instance;
END

procedure ExtendedTest_function_test_Int_Int(this ExtendedTest, value Int) {
  log("Before Test " + value);
  log("Test " + value);
  field result = value + 1;
  log("After Test " + value + " - " + result);
  return result;
}

procedure generate() Test {
  if RANDOM > 0.5 {
    return Test_constructor();
  }
  else {
    return ExtendedTest_constructor() as Test;
  }
}

procedure main() {
  field test Test;

  test = generate();

  if test is ExtendedTest {
    ExtendedTest_function_test_Int_Int(test as ExtendedTest);
  }
  else {
    Test_function_test_Int_Int(test);
  }
}
